#!/bin/bash

# extract as much text as possible from files
# and write to stdout
# errors are printed on stderr

# requirements:
# for pdf
# * file: detect mime
# * unpaper: straighten images for OCR
# * pdftotext: extract text from pdfs
# * convert: manipulate images
# fow word
# * antiword: extract text from ms word files


############################################################################3

# number of processes to use on tasks where multitasking is possible
PROCS=2


############################################################################3

cleanup() {
    test "$TEMPDIR" != "" -a -e "$TEMPDIR" && rm -r $TEMPDIR
}

die() {
    e "die: $1"
    cleanup
    exit 1
}

e() {
    # TODO: quiet option
    echo "$1" >&2
}

do_pdf() {
    e "pdf: extracting text"
    pdftotext  -raw -nopgbrk -q $FILE - >> $TXTDIR/0-pdftotext.txt

    e "pdf: extracting images"
    # export images
    pdfimages -p $FILE $IMGDIR/out

    # join images to pages
    for i in `ls -1 $IMGDIR | cut -c -7|uniq`; do
        convert $IMGDIR/$i* -append -unsharp 10 $IMGDIR/page_$i.ppm
        rm $IMGDIR/$i*
    done
    do_ocr
}

# do ocr on all images
do_ocr() {
    e "ocr: preparing.."
    # unpaper
    unpaper -q $IMGDIR/page_out-%03d.ppm $IMGDIR/unpapered-%03d.ppm
    rm $IMGDIR/page_out*

    e "ocr: performing ocr"
    find $IMGDIR -type f |\
        xargs -P $PROCS -n 1 -i tesseract '{}' '{}_tes'
    mv $IMGDIR/*.txt $TXTDIR/
    rm $IMGDIR/*
}

do_msword() {
    e "msword: running antiword"
    antiword $FILE > $TXTDIR/antiword.txt

    # TODO extract pictures, ocr
}

do_odt() {
    e "odt: running odt2txt"
    odt2txt $FILE > $TXTDIR/antiword.txt

    # TODO extract pictures, ocr
}

finish() {
    e "done"
    e "-------"
    # clen up
    # remove blank space
    cat $TXTDIR/* | \
        tr '\n' ' ' |\
        sed 's/[^/:;+=&^%$#!`~?<>*€a-zäöüA-ZÄÖÜß0-9@_., -]//g'| \
        sed 's/[=+#-]\{2,\}//g'|\
        sed 's/\s\+/ /g'|\
        cat
        # TODO zeichen whiteliste anpassen
}


############################################################################3

FILE=$1

# test if file exists before doing some actual work
test -e $FILE || die "file does not exist"

# make shure the folder does not exist
while true; do
    R=$RANDOM
    TEMPDIR=/tmp/cattext-$RANDOM
    test -e $TEMPDIR || break
done
mkdir $TEMPDIR || die

IMGDIR=$TEMPDIR/images
TXTDIR=$TEMPDIR/text
mkdir $IMGDIR || die
mkdir $TXTDIR || die

# clean up on signal
# signals: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE
# ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM
# PROF WINCH POLL PWR SYS
trap "cleanup" INT QUIT ABRT KILL TERM


############################################################################3
# determine file format
MIME=`file -b --mime-type $1`

case "$MIME" in
    application/pdf)
        e "pdf mime detected"
        do_pdf
        ;;
    application/msword)
        e "msword mime detected"
        do_msword
        ;;
    application/vnd.oasis.opendocument.text)
        e "odt mime detected"
        do_odt
        ;;
    *)
        die "format not scannable"
        ;;
esac

finish


